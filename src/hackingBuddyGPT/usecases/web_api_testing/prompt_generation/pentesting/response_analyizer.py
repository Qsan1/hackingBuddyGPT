import json

from hackingBuddyGPT.usecases.web_api_testing.prompt_generation.prompt_information import PromptPurpose


class ResponseAnalyzer(object):
    def set_purpose(self, purpose):
        self.purpose = purpose

    def parse_http_response(self, raw_response):
        # Split headers and body
        header_data, _, body = raw_response.partition('\r\n\r\n')
        # Split the header lines
        header_lines = header_data.splitlines()

        # Extract status code and reason
        http_version, status_code, reason = header_lines[0].split(' ', 2)
        status_code = int(status_code)

        # Extract headers
        headers = {}
        unacceptable = ['', '{}']
        for line in header_lines[1:]:
            if not line.strip() in unacceptable:
                key, value = line.split(':', 1)
                headers[key.strip()] = value.strip()

        # Parse JSON body if available
        if headers.get("Content-Type") == "application/json":
            try:
                body = json.loads(body)
            except json.JSONDecodeError:
                body = {}

        return status_code, headers, body

    def analyze_parsed_response(self, status_code, headers, body):


        if self.purpose == PromptPurpose.AUTHENTICATION_AUTHORIZATION:
             return self.analyze_authentication_authorization(status_code, headers, body)
        elif self.purpose == PromptPurpose.INPUT_VALIDATION:
            return self.analyze_input_validation(status_code, headers, body)
        else:
            return {}


    def analyze_response(self, raw_response):
        # Parse and analyze the HTTP response
        status_code, headers, body = self.parse_http_response(raw_response)
        return self.analyze_parsed_response(status_code, headers, body)

    def print_analysis(self, analysis):
        print(f"HTTP Status Code: {analysis['status_code']}")
        print(f"Authentication Status: {analysis['authentication_status']}")

        print("Authentication Headers Present:", "Yes" if analysis['auth_headers_present'] else "No")

        print("Rate Limiting Information:")
        for key, value in analysis['rate_limiting'].items():
            print(f"  {key}: {value}")

        print("Content Body:")
        print(json.dumps(analysis['content_body'], indent=4))

    def analyze_authentication_authorization(self, status_code, headers, body):
        analysis = {}
        # Step 1: Examine the HTTP Status Code
        analysis['status_code'] = status_code
        if status_code == 200:
            analysis['authentication_status'] = "Authenticated"
        elif status_code in [401, 403]:
            analysis['authentication_status'] = "Not Authenticated or Not Authorized"
        else:
            analysis['authentication_status'] = "Unknown"

        # Step 2: Check for Headers Related to Authentication
        auth_related_headers = ['Authorization', 'Set-Cookie', 'WWW-Authenticate']
        analysis['auth_headers_present'] = any(header in headers for header in auth_related_headers)

        # Step 3: Review Rate Limiting Headers
        rate_limit_info = {
            'X-Ratelimit-Limit': headers.get('X-Ratelimit-Limit'),
            'X-Ratelimit-Remaining': headers.get('X-Ratelimit-Remaining'),
            'X-Ratelimit-Reset': headers.get('X-Ratelimit-Reset')
        }
        analysis['rate_limiting'] = rate_limit_info

        # Step 4: Inspect the Content for Access Control Indicators
        analysis['content_body'] = body
        return analysis

    def analyze_input_validation(self, status_code, headers, body):
        pass


if __name__ == '__main__':
    # Example HTTP response to parse
    raw_http_response = """HTTP/1.1 404 Not Found
    Date: Fri, 16 Aug 2024 10:01:19 GMT
    Content-Type: application/json; charset=utf-8
    Content-Length: 2
    Connection: keep-alive
    Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1723802269&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=dkvm744qehjJmab8kgf%2BGuZA8g%2FCCIkfoYc1UdYuZMc%3D"}]}
    Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1723802269&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=dkvm744qehjJmab8kgf%2BGuZA8g%2FCCIkfoYc1UdYuZMc%3D
    Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
    X-Powered-By: Express
    X-Ratelimit-Limit: 1000
    X-Ratelimit-Remaining: 999
    X-Ratelimit-Reset: 1723802321
    Vary: Origin, Accept-Encoding
    Access-Control-Allow-Credentials: true
    Cache-Control: max-age=43200
    Pragma: no-cache
    Expires: -1
    X-Content-Type-Options: nosniff
    Etag: W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"
    Via: 1.1 vegur
    CF-Cache-Status: HIT
    Age: 210
    Server: cloudflare
    CF-RAY: 8b40951728d9c289-VIE
    alt-svc: h3=":443"; ma=86400

    {}"""
    respons_analyzer = ResponseAnalyzer()
    respons_analyzer.purpose = PromptPurpose.AUTHENTICATION_AUTHORIZATION
    # Parse and analyze the HTTP response
    status_code, headers, body = respons_analyzer.parse_http_response(raw_http_response)
    analysis = respons_analyzer.analyze_parsed_response(status_code, headers, body)

    # Print the analysis results
    respons_analyzer.print_analysis(analysis)
