from typing import Dict, List

from hackingBuddyGPT.usecases.web_api_testing.prompt_generation.prompt_information import PromptPurpose


class PenTestingInformation(object):
    explore_steps: dict[str, list[str]]

    def __init__(self, schemas={}):
        self.schemas = schemas
        self.explore_steps = self.init_steps
        self.exploit_steps = self.analyse_steps


    @property
    def init_steps(self):
        return {
            PromptPurpose.AUTHENTICATION_AUTHORIZATION: ["Verify if there exists an authentication mechanism,the effectiveness of the authentication mechanism, that only authorized users or application can access the APIs and if the API enforces proper authorization checks to prevent unauthorized access to resources."],
            PromptPurpose.INPUT_VALIDATION: [
                f"Examine how the API handles various types of user input by crafting and sending a POST request with valid data. Valid schemas are {self.schemas}.",
                f"Examine how the API handles various types of user input by crafting and sending a POST request with invalid data. Valid schemas are {self.schemas}.",
                f"Examine how the API handles various types of user input by crafting and sending a POST request with edge data. Valid schemas are {self.schemas}.",
                f"Omit required fields to see if the API correctly identifies them as missing by sending a POST request. Valid schemas are {self.schemas}.",
                f"Include special characters or injection attempts (e.g., SQL Injection, XSS) to see if the API sanitizes inputs properly, do this by sending a POST request. Valid schemas are {self.schemas}.",
                f"Send data that doesnâ€™t match the expected format by a POST request. Valid data formats are {self.schemas}.",
                "Check for proper error handling, response codes, and sanitization.",
                "Attempt to exploit common vulnerabilities by injecting malicious inputs, such as SQL injection (e.g., ' OR 1=1--), NoSQL injection (e.g., {'$gt': ''}), cross-site scripting (e.g., <script>alert('XSS')</script>), and other injection attacks. Evaluate whether the API properly validates, escapes, and sanitizes all user-supplied data, ensuring no unexpected behavior or security vulnerabilities are exposed."
            ],
            PromptPurpose.ERROR_HANDLING_INFORMATION_LEAKAGE: [
                "Check how the API handles errors and if there are detailed error messages.",
                "Look for vulnerabilities and information leakage. "],
            PromptPurpose.SESSION_MANAGEMENT: ["Check if the API uses session management.",
                                               "Look at the session handling mechanism for vulnerabilities such as session fixation, session hijacking or session timeout settings."],
            PromptPurpose.CROSS_SITE_SCRIPTING: [
                "Look for vulnerabilities that could enable malicious scripts to be injected into API responses."],
            PromptPurpose.CROSS_SITE_FORGERY: [
                "Look for vulnerabilities that could enable unauthorized actions to be performed on behalf of authenticated users."],
            PromptPurpose.BUSINESS_LOGIC_VULNERABILITIES: [
                "Look at the API's buisness logic and identify flaws that can be exploited for unauthorized access, manipulation, or data exposure."],
            PromptPurpose.RATE_LIMITING_THROTTLING: [
                "Check if the API has adequate rate-limiting and throttling controls to prevent abuse and denail-of-service attacks."],
            PromptPurpose.SECURITY_MISCONFIGURATIONS: [
                "Check the API's configuration setting and determine if it exposes sensitive information or creates security weaknesses."],
            PromptPurpose.LOGGING_MONITORING: [
                "Look at the logging and monitoring capabilities of the API and check if security incidents are detected and responded to promptly. "]
        }

    @property
    def analyse_steps(self, response=""):
        return {PromptPurpose.PARSING: [f'{response}\nPlease parse this response and extract the following details:'
                f'- Status Code'
                f'- Reason Phrase'
                f'- Headers'
                f'- Response Body'],
                PromptPurpose.ANALYSIS: [f'Given the following parsed HTTP response:{response}'
                f'Please analyze this response to determine:'
                f'1. Whether the status code is appropriate for this type of request.'
                f'2. If the headers indicate proper security and rate-limiting practices.'
                f'3. Whether the response body is correctly handled.'],
                PromptPurpose.DOCUMENTATION: [f'Based on the analysis provided, document the findings of this API response validation:{response}'],
                PromptPurpose.REPORTING:[f'Based on the documented findings, suggest any improvements or issues that should be reported to the API developers']}

